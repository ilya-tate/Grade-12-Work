React
    - Creating a react app is a large task that we can use toolchains to do for us.
    - There are a lot of toolchains that server different purposes but here are the bigger ones: Create React App, Next.js, Gatsby, and Parcel.

Create React App
    - Now that the CRA is installed we can use it to create a new react app.
    - npx create-react-app "file-name"
    - This command is run with npx (nod package executable).

Intro to .jsx
    - JSX stands for javascript expressions and runs perfectly fine in a .js file too.
    - This language allows us to type HTML style code in a JS format.
    - The biggest advantage is allowing us to do calcutltaions or conditional checking alongside the page rendering.

Using .jsx
    - When you are creating components or anything that is rendered with the index.js file you can instead use .jsx.
    - .jsx should only be used with files that are capitalized.
    - You can use JS or JSX bit the benefit to JSX is the use of emmet and auto-fill of the HTML elements.

Using Code in JSX`
    - The way to code in JSX is surrounding it in {}.
    - This informs the code to treat everything inside of the brackets as regular JS.
    - If you want anything to render than you need to "return" if from the component function.
    - Lastly, just like JS, when you return something the code stops.

Introduction to Props
    - Props (short for properties) are any settings or values that is attaches to a component.
    - These are most used to pass values down the line but cna also be used just like HTML element properties.

Props
    - You can give these props any name and any value.
    - The better you name it hte more useful it will be.
    Ex.
        <Question
            key={ data.id }
            title={ data.title }
            info={ data.info }
        />
        const Question = ({ title, info }) => // Code

Destructuring Props
    - If you have a lot of information you can destructure your props to save you some space.
    Ex.
        <Question
            key={ data.id }
            { ...data }
        />
        const Question = ({ title, info }) => // Code

Anatomy of .map()
    - You can destructure your item if you like, this is not required but does make the setup easier.

Mapping Arrays
    - You can do more complicated return that use HTML components and props to fill out the information.

Using Props
    - Using props once they are passed down is as simple as adding the name of the prop to the component parameters.
    - We use { ... } to immediately deconstruct it for use in the component.
    Ex.
        const List = ({ people, name, id, info }) => // Code
    - Now that we have accepted these props we are able to use them as variables.
    - This is especially important when we are mapping and using the same variable for several different values.

Introduction to Hooks
    - React is only re-rendered when told to, in react 16.7 and older you had to write these functions by hand.
    - Since react 16.8 there are built in hooks that you cna use without creating your own functions.
    - Hooks are just special functions that are built into react that let you 'hook' into the react features.
    - Every hook in react must start with a lowercase "use".

Use Effect
    - useEffect() is a function that will run anytime a re-render happens.
    - This is especially helpful when pulling data from a server and we want to make sure that the data is up to date on render.
    - useEffect runs a certain chunk of code ever re-render, most often that chunk is a function.
    - The 'effect' to the right is the js code that runs when you render.
    - The effect that is created is permanent and will stack over and over.
    - We can us ea cleanup function that removes any left behind events. This is not required for every effect, only use when needed (usually events).
    - The input array can be used to choose specific state changes that will cause this effect instead of every render.
    - You can also leave it empty to have the effect happen only once.
    Ex.
        useEffect(() => {
            // Effect
            return () => {
                // Cleanup
            }
        }, [/* input */]);

React-Router
    - React-Router is not an official library that is included in the create-react-app chaintool.
    - This si something that you will NEED to use for multi-page sites to avoid page reloading.
    - Technically you are able to re-render the entire site by using states.
    - Routes let you create an expansive site from databases without needing to do extra programming.
    - npm i --global react-router-dom

Imports
    - There are four imports you need to have.
    - We are going to go over these one at time, write these somewhere easily accessible.

BrowserRouter as <Router>
    { BrowserRouter as Router } - You don't have to rename that import but it is common practice and you should at least be read to see it from others.
    <Router> - SUrround your <App /> with the "Router" element on the index level making it usable everywhere in the app.
    Ex.
        import { BrowserRouter as Router } from 'react-router-dom';
        ReactDOM.render(
            <Router>
                <App />
            </Router>,
            document.getElementById('root');
        );

<Route path="url">
    - The "Route" lets us define what the URL path name will say.
    - In this example we use "/" for the home page "west-mec.org".
    - "/about" would read "west-mec.org/about".
    Ex.
        <Route exact path="/">
            <Home />
        </Route>
        <Route path="/about">
            <About />
        </Route>

Exact Path
    - React will render every link that matches the requested URL on the router.
    - In order to stop this we use exact before the path stop in form rendering all the time.
    - Most important for this is home "/" because it matches everything.

Error 404 Page
    - Routes make it easy to check error 404 pages and design them.
    - There is a catch all route that you can create an error page for.
    Ex.
        <Route path="*">
            <Error />
        <Route />

<Switch>
    - Switch is another component that you can use to allow exclusively render a path.
    - THis stop the need for exact and makes sure the error pages doesn't always render.
    - Make sure that you list the page from most to least specific.
    Ex.
    	<Switch>
	    <Route exact path="/">
	        <Home />
	    </Route>
	    <Route path="*">
	        <Error />
	    </Route>
	</Switch

Error Page
    - Using react router we are able to set up a switch component that will force ONLY the first path to match to render.
    - This allows us to create a "404 page not found" catch.
    Ex.
        <Route path="*">

<Link to="url">
    - Using routers mean that you can't use <a/> tags.
    - <a/> tag will force re-renders of your site and will reset your state values in some cases.
    - Instead we use <Links> and "to" instead of "href".

useRef
    - The hook useRef creates references to other values.
    - There are two big differences between useRef and useState. useRef does not trigger re-renders. useRef can be used to access DOM elements.

No Re-Render
    - Variables also don't trigger re-renders but useRef does not lose its value when a re-render happens.
    - This is useful for small changes like counting clicks or logging errors.
    - Re-rendering can slow down the site a lot if done too often.

Accessing DOM Elements
    - DOM elements are things like <div> or <input>.
    - By using a ref property we are able to easily change things about the element using ref.

useReducer
    - useReducer is another hook that is available with React that allows you to store a bunch of functions / methods in one or more files.
    State - This is a state that is declared at the start that holds all your information.
    Dispatch - This is a word or phrase that is used to tell the reducer what to do.

File Structure
    - In order to save space / organize your functions, you place everything inside of a separate file called reducer.js that is then imported to the rest of the files.
    - useReducer is a hook imported from react and used in all of the files that require it.

Importing useReducer
    - We import useReducer from react.
    - Import the reducer function from the .js file.
    - Create a default state.
    - Then create the useReducer hook in the component function.

Dispatch
    - The dispatch function in your app will take an object filled with different values and pass them on to the reducer.js.
    type: - Is the command you want to run.
    payload: - Is the relevant information that you will need to complete the function.
    Ex.
        <button onClick={ () => {
            dispatch({ type: 'REMOVE_ITEM', payload: person.id });
        } } />

reducer.js
    - reducer.js is a file that you use to hold all of the switch cases that run using your reducer.
    Ex.
        export const reducer = (state, action) => {
            if (action.type === 'ADD ITEM') {
                const newPeople = [...state.people, action.payload];
                return { ...state, people: newPeople };
            }
        }
    - reducer.js will have many different IFs to handle all the types you use in reducer.

useContext
    - useContext is a hook that allows us to create global states, functions, and variables.
    - Context allows us to skip prop drilling and keep all the functional pieces of our code separate behind a single file.
    - Context is strange compared to other hooks since this is used on the index level.
    - For the entire program to read and write to this data it needs to be provided to the entire app with a wrapper element.

context.js
    - The content is storing data in 1 or more separate files.
    - If there is only 1 file then we should call it context.js.
    - This file builds the context hook and exports it to the index level.

Importing Context
    - Import context from react the same as the other hooks.
    - Creating your context is not useContext, notice the "React.createContext()".
    Ex.
        import React, { useContext } from 'react';
        const AppContext = React.createContext();

AppProvider Function
    - This App Provider is the function that you use to create and return all of the values that you want available to the entire program.
    - The parameters for this function are always { children }, meaning everything in the app.

Return AppContext.Provider
    - You put all the state and stuff in here but the return is the magic.
    - The value property is hwo you pass the state sand functions onto the rest of the app.
    Ex.
        return (
            <AppContext.Provider value={ { isLoading, error } }
                { children }
            </ AppContext.Provider>
        );

Exporting
    - Exporting the context requires two different exports.
    - The newly created react hook. Usually called something related to the context i.e. useGlobalContext or useAppContext.
    - The AppContext and AppProvider export.

Custom Hooks
    - You can create your own hoods (functions that use states) by creating them in a different file and exporting them.

useFetch
    - There are a few uses for this but consider making these for anything that you can and will use it over and over or in multiple programs.
    - useFetch is an extremely common functions since we are commonly using API fetch requests.


